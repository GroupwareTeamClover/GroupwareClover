<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="Chat">
    <!-- 채팅방 목록 조회 -->
    <select id="getChatRooms" resultType="com.clover.messenger.dto.ChatRoomDTO">
        SELECT cr.*
        FROM chatRoom cr
        JOIN chatMembers cm ON cr.room_seq = cm.room_seq
        WHERE cm.emp_seq = #{empSeq}
        ORDER BY cr.room_create_time DESC
    </select>
    
    <!-- 채팅방 생성 -->
    <insert id="createRoom" parameterType="com.clover.messenger.dto.ChatRoomDTO" useGeneratedKeys="true" keyProperty="roomSeq">
        <selectKey keyProperty="roomSeq" order="BEFORE" resultType="int">
            SELECT room_sequence.nextval FROM DUAL
        </selectKey>
        INSERT INTO chatRoom (
            room_seq, room_name, room_type, room_description, emp_seq
        ) VALUES (
            #{roomSeq}, #{roomName}, #{roomType}, #{roomDescription}, #{empSeq}
        )
    </insert>
    
    <!-- 사용자를 채팅방에 추가 -->
    <insert id="addUserToRoom">
        INSERT INTO chatMembers (emp_seq, room_seq, member_role)
        VALUES (#{empSeq}, #{roomSeq}, 'MEMBER')
    </insert>
    
    <!-- 메시지 저장 -->
    <insert id="saveMessage" parameterType="com.clover.messenger.dto.ChatMessageDTO">
        INSERT INTO ChatMessage (message_seq, message_content, message_type, send_time, room_seq, sender_seq)
        VALUES (message_sequence.NEXTVAL, #{messageContent}, #{messageType}, CURRENT_TIMESTAMP, #{roomSeq}, #{senderSeq})
    </insert>
    
    <!-- 채팅방의 메시지 목록 조회 -->
    <select id="getRoomMessages" resultType="com.clover.messenger.dto.ChatMessageDTO">
        SELECT *
        FROM ChatMessage
        WHERE room_seq = #{roomSeq}
        ORDER BY send_time ASC
    </select>
    
    <!-- 채팅방 정보 조회 -->
    <select id="getRoomById" resultType="com.clover.messenger.dto.ChatRoomDTO">
        SELECT cr.*
        FROM chatRoom cr
        JOIN chatMembers cm ON cr.room_seq = cm.room_seq
        WHERE cr.room_seq = #{roomSeq} AND cm.emp_seq = #{empSeq}
    </select>
    
    <!-- 사용자가 채팅방에 속해 있는지 확인 -->
    <select id="isUserInRoom" resultType="int">
        SELECT COUNT(*)
        FROM chatMembers
        WHERE emp_seq = #{empSeq} AND room_seq = #{roomSeq}
    </select>

    <select id="getRoomParticipants" resultType="com.clover.employee.dto.EmployeeDTO">
        SELECT e.emp_seq, e.emp_name, e.emp_avatar
        FROM Employee e
        JOIN ChatMembers cm ON e.emp_seq = cm.emp_seq
        WHERE cm.room_seq = #{roomSeq}
    </select>

    <!-- 온라인 사용자 목록 조회 -->
    <!-- 유저세션 테이블 필요함. -->
    <!-- <select id="getOnlineUsers" resultType="com.clover.employee.dto.EmployeeDTO">
        SELECT e.emp_seq, e.emp_name, e.emp_avatar
        FROM Employee e
        JOIN UserSession us ON e.emp_seq = us.emp_seq
        WHERE e.emp_seq != #{currentUserSeq}
        AND us.last_activity <![CDATA[>]]> DATE_SUB(NOW(), INTERVAL 5 MINUTE)
    </select> -->

	<select id="getOrganization" resultType="java.util.HashMap">
		select employee.emp_seq, employee.emp_name, employee.emp_avatar, role.role_name, department.dept_name
		from employee
        join department on employee.dept_code = department.dept_code
        join role on employee.role_code = role.role_code
	</select>

    <!-- 특정 사용자의 프로필 정보를 조회하는 쿼리 -->
    <select id="getProfile" parameterType="int" resultType="java.util.HashMap">
        select 
            e.emp_seq as empSeq, 
            e.emp_avatar as empAvatar, 
            e.emp_name as empName, 
            e.emp_email as empEmail, 
            r.role_name as roleName, 
            d.dept_name as deptName, 
            e.emp_tel as empTel, 
            e.emp_birth as empBirth, 
            r.role_code as roleCode
        from employee e
        join department d on e.dept_code = d.dept_code
        join role r on e.role_code = r.role_code
        where e.emp_seq = #{empSeq}
    </select>

</mapper>