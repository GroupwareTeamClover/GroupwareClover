<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="Chat">
    <!-- 1:1 채팅방 조회 -->
    <select id="getExistingOneToOneRoom" resultType="com.clover.messenger.dto.ChatRoomDTO">
        SELECT cr.*
        FROM chatRoom cr
        JOIN chatMembers cm1 ON cr.room_seq = cm1.room_seq
        JOIN chatMembers cm2 ON cr.room_seq = cm2.room_seq
        WHERE cr.room_type = 'private'
        AND ((cm1.emp_seq = #{empSeq1} AND cm2.emp_seq = #{empSeq2})
             OR (cm1.emp_seq = #{empSeq2} AND cm2.emp_seq = #{empSeq1}))
        AND (SELECT COUNT(*) FROM chatMembers WHERE room_seq = cr.room_seq) = 2
    </select>

    <!-- 채팅방 정보 업데이트 -->
    <update id="updateRoomInfo">
        MERGE INTO chatMembers cm
        USING (SELECT #{roomSeq} as room_seq, #{empSeq} as emp_seq FROM DUAL) d
        ON (cm.room_seq = d.room_seq AND cm.emp_seq = d.emp_seq)
        WHEN MATCHED THEN
            UPDATE SET
                cm.custom_room_name = #{roomName},
                cm.custom_room_avatar = #{roomAvatar}
        WHEN NOT MATCHED THEN
            INSERT (room_seq, emp_seq, custom_room_name, custom_room_avatar)
            VALUES (#{roomSeq}, #{empSeq}, #{roomName}, #{roomAvatar})
    </update>

    <!-- 채팅방 목록 조회 -->
    <!-- 공통 테이블 표현식 -->
    <select id="getChatRoomsWithCustomInfo" resultMap="chatRoomResultMap">
        WITH LatestMessages AS (
            SELECT room_seq, message_content, send_time,
                ROW_NUMBER() OVER (PARTITION BY room_seq ORDER BY send_time DESC) AS rn
            FROM ChatMessage
        ),
        UnreadCounts AS (
            SELECT cm2.room_seq, COUNT(*) AS unread_count
            FROM ChatMessage cm2
            LEFT JOIN LastReadMessage lrm ON cm2.room_seq = lrm.room_seq AND lrm.emp_seq = #{empSeq}
            WHERE lrm.last_read_message_seq IS NULL OR cm2.message_seq > lrm.last_read_message_seq
            GROUP BY cm2.room_seq
        )
        SELECT cr.room_seq, cr.room_name, cr.room_state, cr.room_create_time, 
            cr.room_type, cr.room_description, cr.emp_seq, cr.room_avatar, 
            cm.custom_room_name, cm.custom_room_avatar,
            lm.message_content AS last_message,
            lm.send_time AS last_message_time,
            COALESCE(uc.unread_count, 0) AS unread_count
        FROM chatRoom cr
        JOIN chatMembers cm ON cr.room_seq = cm.room_seq
        LEFT JOIN LatestMessages lm ON cr.room_seq = lm.room_seq AND lm.rn = 1
        LEFT JOIN UnreadCounts uc ON cr.room_seq = uc.room_seq
        WHERE cm.emp_seq = #{empSeq}
        ORDER BY cr.room_create_time DESC
    </select>
    
    <resultMap id="chatRoomResultMap" type="com.clover.messenger.dto.ChatRoomDTO">
        <id property="roomSeq" column="room_seq"/>
        <result property="roomName" column="room_name"/>
        <result property="roomState" column="room_state"/>
        <result property="roomCreateTime" column="room_create_time"/>
        <result property="roomType" column="room_type"/>
        <result property="roomDescription" column="room_description"/>
        <result property="empSeq" column="emp_seq"/>
        <result property="roomAvatar" column="room_avatar"/>
        <result property="customRoomName" column="custom_room_name"/>
        <result property="customRoomAvatar" column="custom_room_avatar"/>
        <result property="lastMessage" column="last_message"/>
        <result property="lastMessageTime" column="last_message_time"/>
        <result property="unreadCount" column="unread_count"/>
    </resultMap>
    <!-- 채팅방 생성 -->
    <insert id="createRoom" parameterType="com.clover.messenger.dto.ChatRoomDTO" useGeneratedKeys="true" keyProperty="roomSeq">
        <selectKey keyProperty="roomSeq" order="BEFORE" resultType="int">
            SELECT room_sequence.nextval FROM DUAL
        </selectKey>
        INSERT INTO chatRoom (
            room_seq, room_name, room_state, room_type, room_description, emp_seq, room_avatar
        ) VALUES (
            #{roomSeq}, #{roomName}, 'T', #{roomType}, #{roomDescription}, #{empSeq}, #{roomAvatar}
        )
    </insert>
    
    <!-- 사용자를 채팅방에 추가 -->
    <insert id="addUserToRoom">
        INSERT INTO chatMembers (emp_seq, room_seq, member_role)
        VALUES (#{empSeq}, #{roomSeq}, 'MEMBER')
    </insert>
    
    <!-- 메시지 저장 -->
    <insert id="saveMessage" parameterType="com.clover.messenger.dto.ChatMessageDTO">
        INSERT INTO ChatMessage (message_seq, message_content, message_type, send_time, room_seq, sender_seq)
        VALUES (message_sequence.NEXTVAL, #{messageContent, jdbcType=CLOB}, #{messageType, jdbcType=VARCHAR}, CURRENT_TIMESTAMP, #{roomSeq}, #{senderSeq})
    </insert>
    
    <!-- 채팅방의 메시지 목록 조회 -->
    <select id="getRoomMessages" resultType="com.clover.messenger.dto.ChatMessageDTO">
        SELECT *
        FROM ChatMessage
        WHERE room_seq = #{roomSeq}
        ORDER BY send_time ASC
    </select>
    
    <!-- 채팅방 정보 조회 -->
    <select id="getRoomById" resultType="com.clover.messenger.dto.ChatRoomDTO">
        SELECT cr.*
        FROM chatRoom cr
        JOIN chatMembers cm ON cr.room_seq = cm.room_seq
        WHERE cr.room_seq = #{roomSeq}
        AND cm.emp_seq = #{empSeq}
    </select>
    
    <!-- 사용자가 채팅방에 속해 있는지 확인 -->
    <select id="isUserInRoom" resultType="int">
        SELECT COUNT(*)
        FROM chatMembers
        WHERE emp_seq = #{empSeq} AND room_seq = #{roomSeq}
    </select>

    <!-- 채팅방 참여자 조회 -->
    <select id="getRoomParticipants" resultType="com.clover.employee.dto.EmployeeDTO">
        SELECT e.emp_seq, e.emp_name, e.emp_avatar, cm.member_role
        FROM Employee e
        JOIN ChatMembers cm ON e.emp_seq = cm.emp_seq
        WHERE cm.room_seq = #{roomSeq}
    </select>

    <!-- 온라인 사용자 목록 조회 -->
    <!-- 유저세션 테이블 필요함. -->
    <!-- <select id="getOnlineUsers" resultType="com.clover.employee.dto.EmployeeDTO">
        SELECT e.emp_seq, e.emp_name, e.emp_avatar
        FROM Employee e
        JOIN UserSession us ON e.emp_seq = us.emp_seq
        WHERE e.emp_seq != #{currentUserSeq}
        AND us.last_activity <![CDATA[>]]> DATE_SUB(NOW(), INTERVAL 5 MINUTE)
    </select> -->

    <!-- 조직도 조회 -->
    <select id="getOrganization" resultType="java.util.HashMap">
        SELECT employee.emp_seq, employee.emp_name, employee.emp_avatar, role.role_name, department.dept_name
        FROM employee
        JOIN department ON employee.dept_code = department.dept_code
        JOIN role ON employee.role_code = role.role_code
    </select>

    <!-- 특정 사용자의 프로필 정보 조회 -->
    <select id="getProfile" parameterType="int" resultType="java.util.HashMap">
        SELECT 
            e.emp_seq, e.emp_avatar, e.emp_name, e.emp_email, r.role_name,
            d.dept_name, e.emp_tel, e.emp_birth, r.role_code
        FROM employee e
        JOIN department d ON e.dept_code = d.dept_code
        JOIN role r ON e.role_code = r.role_code
        WHERE e.emp_seq = #{empSeq}
    </select>


    <!-- 읽지 않은 메시지 수 조회 -->
    <select id="getUnreadMessageCount" resultType="int">
        SELECT COUNT(*)
        FROM ChatMessage cm
        LEFT JOIN LastReadMessage lrm ON cm.room_seq = lrm.room_seq AND lrm.emp_seq = #{empSeq}
        WHERE cm.room_seq = #{roomSeq}
        AND (lrm.last_read_message_seq IS NULL OR cm.message_seq > lrm.last_read_message_seq)
    </select>

    <select id="getLastMessage" resultType="com.clover.messenger.dto.ChatMessageDTO">
        SELECT *
        FROM (
            SELECT *
            FROM ChatMessage
            WHERE room_seq = #{roomSeq}
            ORDER BY send_time DESC
        )
        WHERE ROWNUM = 1
    </select>    

    <!-- 채팅방 멤버의 마지막 접속 시간 업데이트 -->
    <update id="updateLastAccessTime">
        UPDATE chatMembers
        SET last_access_time = CURRENT_TIMESTAMP
        WHERE emp_seq = #{empSeq} AND room_seq = #{roomSeq}
    </update>

    <!-- 채팅방 멤버 목록 조회 -->
    <select id="getRoomMembers" resultType="int">
        SELECT emp_seq
        FROM chatMembers
        WHERE room_seq = #{roomSeq}
    </select>

    <!-- 알림 저장 -->
    <insert id="saveNotification">
        INSERT INTO Notifications (notification_seq, notification_type, message_seq, emp_seq)
        VALUES (notification_sequence.NEXTVAL, #{notificationType}, #{messageSeq}, #{empSeq})
    </insert>

    <!-- 알림 목록 조회 -->
    <select id="getNotifications" resultType="com.clover.messenger.dto.NotificationDTO">
        SELECT *
        FROM Notifications
        WHERE emp_seq = #{empSeq}
        ORDER BY create_date DESC
    </select>

    <!-- 알림 읽음 처리 -->
    <update id="markNotificationAsRead">
        UPDATE Notifications
        SET is_read = 'T'
        WHERE notification_seq = #{notificationSeq}
    </update>

    <!-- 이름만 가져오기-->
    <select id="getEmployeeName" parameterType="int" resultType="com.clover.employee.dto.EmployeeDTO">
        SELECT *
        FROM EMPLOYEE
        WHERE emp_seq = #{empSeq}
    </select>

    <select id="getEmployeeInfo" parameterType="map" resultType="java.util.HashMap">
        SELECT *
        FROM CHATMEMBERS
        WHERE room_seq = #{roomSeq}
        and emp_seq = #{empSeq}
    </select>    

</mapper>