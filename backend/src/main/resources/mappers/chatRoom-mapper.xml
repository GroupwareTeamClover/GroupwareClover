<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ChatRoomMapper">

    <!-- 1:1 채팅방 조회 -->
    <select id="getExistingOneToOneRoom" resultType="com.clover.messenger.dto.ChatRoomDTO">
        SELECT cr.*
        FROM chatRoom cr
        JOIN chatMembers cm1 ON cr.room_seq = cm1.room_seq
        JOIN chatMembers cm2 ON cr.room_seq = cm2.room_seq
        WHERE cr.room_type = 'private'
          AND ((cm1.emp_seq = #{empSeq1} AND cm2.emp_seq = #{empSeq2})
          OR (cm1.emp_seq = #{empSeq2} AND cm2.emp_seq = #{empSeq1}))
          AND (SELECT COUNT(*) FROM chatMembers WHERE room_seq = cr.room_seq) = 2
    </select>

    <!-- 채팅방 정보 업데이트 -->
    <update id="updateRoomInfo">
        MERGE INTO chatMembers cm
        USING (SELECT #{roomSeq} as room_seq, #{empSeq} as emp_seq FROM DUAL) d
        ON (cm.room_seq = d.room_seq AND cm.emp_seq = d.emp_seq)
        WHEN MATCHED THEN
            UPDATE SET
                cm.custom_room_name = #{roomName},
                cm.custom_room_avatar = #{roomAvatar}
        WHEN NOT MATCHED THEN
            INSERT (room_seq, emp_seq, custom_room_name, custom_room_avatar)
            VALUES (#{roomSeq}, #{empSeq}, #{roomName}, #{roomAvatar})
    </update>

    <!-- 채팅방 목록 조회 -->
    <select id="getChatRoomsWithCustomInfo" resultMap="chatRoomResultMap">
        WITH UnreadCounts AS (
            SELECT cm2.room_seq, COUNT(*) AS unread_count
            FROM ChatMessage cm2
            LEFT JOIN LastReadMessage lrm ON cm2.room_seq = lrm.room_seq AND lrm.emp_seq = #{empSeq}
            WHERE lrm.last_read_message_seq IS NULL OR cm2.message_seq <![CDATA[ > ]]> lrm.last_read_message_seq
            GROUP BY cm2.room_seq
        )
        SELECT cr.room_seq, cr.room_name, cr.room_state, cr.room_create_time, 
            cr.room_type, cr.room_description, cr.emp_seq, cr.room_avatar, 
            cm.custom_room_name, cm.custom_room_avatar,
            cr.last_message,
            cr.last_message_time,
            COALESCE(uc.unread_count, 0) AS unread_count
        FROM chatRoom cr
        JOIN chatMembers cm ON cr.room_seq = cm.room_seq
        LEFT JOIN UnreadCounts uc ON cr.room_seq = uc.room_seq
        WHERE cm.emp_seq = #{empSeq}
        ORDER BY cr.last_message_time DESC NULLS LAST
    </select>

    <!-- 채팅방 생성 -->
    <insert id="createRoom" parameterType="com.clover.messenger.dto.ChatRoomDTO" useGeneratedKeys="true" keyProperty="roomSeq">
        <selectKey keyProperty="roomSeq" order="BEFORE" resultType="int">
            SELECT room_sequence.nextval FROM DUAL
        </selectKey>
        INSERT INTO chatRoom (
            room_seq, room_name, room_state, room_type, room_description, emp_seq, room_avatar, last_message, last_message_time
        ) VALUES (
            #{roomSeq}, #{roomName}, 'T', #{roomType}, #{roomDescription}, #{empSeq}, #{roomAvatar}, 
            #{lastMessage, jdbcType=CLOB}, #{lastMessageTime, jdbcType=TIMESTAMP}
        )
    </insert>

    <!-- 사용자를 채팅방에 추가 -->
    <insert id="addUserToRoom">
        INSERT INTO chatMembers (emp_seq, room_seq, member_role)
        VALUES (#{empSeq}, #{roomSeq}, 'MEMBER')
    </insert>

    <!-- 채팅방 생성 (그룹 채팅방) -->
    <insert id="createGroupRoom" parameterType="com.clover.messenger.dto.ChatRoomDTO" useGeneratedKeys="true" keyProperty="roomSeq">
        <selectKey keyProperty="roomSeq" order="BEFORE" resultType="int">
            SELECT room_sequence.nextval FROM DUAL
        </selectKey>
        INSERT INTO chatRoom (
            room_seq, room_name, room_state, room_type, room_description, emp_seq, room_avatar, last_message, last_message_time
        ) VALUES (
            #{roomSeq}, #{roomName}, 'T', 'group', #{roomDescription}, #{empSeq}, #{roomAvatar,jdbcType=VARCHAR},
            #{lastMessage, jdbcType=CLOB}, #{lastMessageTime, jdbcType=TIMESTAMP}
        )
    </insert>

    <!-- 그룹 멤버 추가 -->
    <insert id="addGroupMember">
        INSERT INTO chatMembers (emp_seq, room_seq, member_role)
        VALUES (#{empSeq}, #{roomSeq}, #{memberRole})
    </insert>

    <!-- 채팅방의 참여자 수 확인 -->
    <select id="getRoomParticipantCount" resultType="int">
        SELECT COUNT(*)
        FROM chatMembers
        WHERE room_seq = #{roomSeq}
    </select>

    <!-- 채팅방 삭제 -->
    <delete id="deleteRoom">
        DELETE FROM chatRoom
        WHERE room_seq = #{roomSeq}
    </delete>

    <!-- 사용자가 채팅방에 속해 있는지 확인 -->
    <select id="isUserInRoom" resultType="int">
        SELECT COUNT(*)
        FROM chatMembers
        WHERE emp_seq = #{empSeq} AND room_seq = #{roomSeq}
    </select>

    <!-- 채팅방 멤버 목록 조회 -->
    <select id="getRoomMembers" resultType="int">
        SELECT emp_seq
        FROM chatMembers
        WHERE room_seq = #{roomSeq}
    </select>

    <!-- 채팅방 멤버의 마지막 접속 시간 업데이트 -->
    <update id="updateLastAccessTime">
        UPDATE chatMembers
        SET last_access_time = CURRENT_TIMESTAMP
        WHERE emp_seq = #{empSeq} AND room_seq = #{roomSeq}
    </update>

    <!-- 채팅방 참여자 조회 -->
    <select id="getRoomParticipants" resultType="com.clover.employee.dto.EmployeeDTO">
        SELECT e.emp_seq, e.emp_name, e.emp_avatar, cm.member_role
        FROM Employee e
        JOIN ChatMembers cm ON e.emp_seq = cm.emp_seq
        WHERE cm.room_seq = #{roomSeq}
    </select>

    <!-- 채팅방 정보 조회 -->
    <select id="getRoomById" resultType="com.clover.messenger.dto.ChatRoomDTO">
        SELECT cr.*
        FROM chatRoom cr
        JOIN chatMembers cm ON cr.room_seq = cm.room_seq
        WHERE cr.room_seq = #{roomSeq}
        AND cm.emp_seq = #{empSeq}
    </select>

    <!-- 채팅방 알림 설정 업데이트 -->
    <update id="updateNotificationSettings">
        UPDATE chatMembers
        SET notifications_enabled = #{enabled}
        WHERE room_seq = #{roomSeq} AND emp_seq = #{empSeq}
    </update>

    <!-- 특정 사용자의 채팅방에서의 정보 조회 -->
    <select id="getEmployeeInfo" parameterType="map" resultType="java.util.HashMap">
        SELECT *
        FROM CHATMEMBERS
        WHERE room_seq = #{roomSeq}
        and emp_seq = #{empSeq}
    </select>

    <!-- 사용자를 채팅방에서 제거 -->
    <delete id="removeUserFromRoom">
        DELETE FROM chatMembers
        WHERE room_seq = #{roomSeq} AND emp_seq = #{empSeq}
    </delete>

    <delete id="deleteChatHistory">
        DELETE FROM ChatMessage
        WHERE room_seq = #{roomSeq} AND sender_seq = #{empSeq}
    </delete>

    <update id="updateRoom" parameterType="com.clover.messenger.dto.ChatRoomDTO">
        UPDATE chatRoom
        SET last_message = #{lastMessage},
            last_message_time = #{lastMessageTime}
        WHERE room_seq = #{roomSeq}
    </update>

    <!-- Result Map -->
    <resultMap id="chatRoomResultMap" type="com.clover.messenger.dto.ChatRoomDTO">
        <id property="roomSeq" column="room_seq"/>
        <result property="roomName" column="room_name"/>
        <result property="roomState" column="room_state"/>
        <result property="roomCreateTime" column="room_create_time"/>
        <result property="roomType" column="room_type"/>
        <result property="roomDescription" column="room_description"/>
        <result property="empSeq" column="emp_seq"/>
        <result property="roomAvatar" column="room_avatar"/>
        <result property="customRoomName" column="custom_room_name"/>
        <result property="customRoomAvatar" column="custom_room_avatar"/>
        <result property="lastMessage" column="last_message"/>
        <result property="lastMessageTime" column="last_message_time"/>
        <result property="unreadCount" column="unread_count"/>
    </resultMap>
</mapper>
